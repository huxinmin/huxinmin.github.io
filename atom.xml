<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://huxinmin.github.io</id>
    <title>胡新敏的个人博客</title>
    <updated>2020-04-09T01:04:56.060Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://huxinmin.github.io"/>
    <link rel="self" href="https://huxinmin.github.io/atom.xml"/>
    <subtitle>胡新敏的个人博客</subtitle>
    <logo>https://huxinmin.github.io/images/avatar.png</logo>
    <icon>https://huxinmin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 胡新敏的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[ JS实现继承的几种方式]]></title>
        <id>https://huxinmin.github.io/post/js-shi-xian-ji-cheng-de-ji-chong-fang-shi/</id>
        <link href="https://huxinmin.github.io/post/js-shi-xian-ji-cheng-de-ji-chong-fang-shi/">
        </link>
        <updated>2020-04-09T01:03:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1原型链继承">1：原型链继承</h2>
<pre><code class="language-javascript">function parent(){}
parent.prototype={}
funcation child(){}
//继承父类
child.prototype = new parent();
//现在用的更多的是 child.prototype= Object.create(parent.prototype);
//注意:不能用child.peototype=parent.prototype,因为一旦修改子类的原型属性会污染父类的原型属性
//重新指定子类的构造器，不然构造器会指向父类
child.prototype.constructor = child;
</code></pre>
<h4 id="特点">特点：</h4>
<ul>
<li>实例是子类的实例，也是父类的实例</li>
<li>父类新增原型方法/原型属性，子类都能访问到</li>
</ul>
<h4 id="缺点">缺点：</h4>
<ul>
<li>无法实现多继承，修改父类原型会影响子类，</li>
<li>创建子类实例时，无法向父类构造函数传参</li>
<li>由于重新new了一个parent，消耗内存</li>
</ul>
<h2 id="2构造继承">2：构造继承</h2>
<pre><code class="language-javascript">function child(){
    parent.call(this)
}
</code></pre>
<h4 id="特点-2">特点：</h4>
<ul>
<li>创建子类实例时，可以向父类传递参数</li>
<li>可以实现多继承（call多个父类对象）</li>
</ul>
<h4 id="缺点-2">缺点：</h4>
<ul>
<li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li>
<li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li>
</ul>
<h2 id="3拷贝继承">3:拷贝继承</h2>
<pre><code class="language-javascript">function child(){
  var parent= new parent();
  for(var p in parent){
    child.prototype[p] = parent[p];
  }
}
</code></pre>
<h4 id="特点-3">特点：</h4>
<ul>
<li>支持多继承</li>
</ul>
<h3 id="缺点-3">缺点：</h3>
<ul>
<li>效率较低，内存占用高（因为要拷贝父类的属性）</li>
<li>无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</li>
</ul>
<h2 id="4新建中间函数继承推荐">4:新建中间函数继承（推荐）</h2>
<pre><code class="language-javascript">// 创建一个没有实例方法的类
var Super = function(){};
Super.prototype = parent.prototype;
//将实例作为子类的原型
child.prototype = new Super();
child.prototype.constructor = child
</code></pre>
<p>该方法由于中间函数是空对象，所以几乎不占内存，性能较高</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://huxinmin.github.io/post/hello-gridea/</id>
        <link href="https://huxinmin.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>