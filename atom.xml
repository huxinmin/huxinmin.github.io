<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://huxinmin.github.io</id>
    <title>胡新敏的个人博客</title>
    <updated>2020-04-09T06:39:21.086Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://huxinmin.github.io"/>
    <link rel="self" href="https://huxinmin.github.io/atom.xml"/>
    <subtitle>胡新敏的个人博客</subtitle>
    <logo>https://huxinmin.github.io/images/avatar.png</logo>
    <icon>https://huxinmin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 胡新敏的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[Js原型以及原型链继承详解]]></title>
        <id>https://huxinmin.github.io/post/js-yuan-xing-yi-ji-yuan-xing-lian-ji-cheng-xiang-jie/</id>
        <link href="https://huxinmin.github.io/post/js-yuan-xing-yi-ji-yuan-xing-lian-ji-cheng-xiang-jie/">
        </link>
        <updated>2020-04-09T06:30:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="对象与数据类型">对象与数据类型</h2>
<p>JS中共有七种数据类型，除了ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。其余六种是：<code>undefined</code>、<code>null</code>、<code>Boolean</code>、<code>String</code>、<code>Number</code>、<code>Object</code>。</p>
<p><code>undefined</code>, <code>number</code>, <code>string</code>, <code>boolean</code>,<code>null</code>属于简单的值类型，使用基本类型变量可以调用方法是因为产生了包装对象（临时的），其中函数、数组、对象、new Number(10)等等都是对象，他们都是引用类型。</p>
<p>其中有几个需要注意的点：</p>
<ul>
<li>所有的对象都是由函数创建</li>
<li>函数也是一个对象，由Function函数创建</li>
<li>Function也是一个对象，由它自己创建</li>
<li>对于字面量创建的对象，只是使用函数创建对象的一个语法糖，例如</li>
</ul>
<pre><code class="language-js">var obj = { a: 1, b: 2};
//等同于
var obj = new Object();
obj.a=1;
obj.b=2;
</code></pre>
<h2 id="prototype与__proto__"><code>prototype</code>与<code>__proto__</code></h2>
<ul>
<li>可以通过<code>Object.getPrototypeOf()</code>和<code>Object.setPrototypeOf()</code>访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 <code>__proto__</code>。</li>
<li>所有函数对象具有<code>prototype</code>属性，普通对象没有，这个<code>prototype</code>的属性值是一个对象，默认的只有一个叫做<code>constructor</code>的属性，指向这个函数本身。</li>
<li>所有的对象都有<code>__proto__</code>，指向创建它的函数的<code>prototype</code>(<code>Object.prototype</code>的<code>__proto__</code>除外，它指向<code>null</code>)，连同一个函数new出来的对象的<code>__proto__</code>都统一指向了这个函数的<code>prototype</code>，根据后面要讲述的原型链规则，也就是说通过这个函数new出来的所有对象都可以直接使用该函数原型上的任意属性和方法</li>
<li>所有的函数，比如 <code>function fn(){}</code>，都是由Function函数创建，因此fn的<code>__proto__</code>指向<code>Function</code>的<code>prototype</code></li>
<li>Function也是函数，因此它也由Function创建的，也就是说它自己创建了自己！所有<code>Function</code>的<code>__proto__</code>指向的就是<code>Function</code>的<code>prototype</code></li>
<li>Object函数也是由Function创建，因此Object的<code>__proto__</code>同样指向<code>Function</code>的<code>prototype</code></li>
<li>Object.prototype却是一个特例——它的<code>__proto__</code>指向的是<code>null</code></li>
<li>prototype也是一个对象，原始<code>prototype</code>只有一个叫做<code>constructor</code>的属性，指向这个函数本身。因为prototype是一个对象，因此它也是由Object方法创建，因此它的<code>__proto__</code>将指向<code>Object.prototype</code></li>
</ul>
<h2 id="es6语法糖class">ES6语法糖Class</h2>
<p>Es6新增的一个Class只是一个prototype的语法糖</p>
<pre><code class="language-js">class Point {
  constructor() {
    // ...
  }
  toString() {
    // ...
  }
  toValue() {
    // ...
  }
}
// 等同于
Point.prototype = {
  constructor() {},
  toString() {},
  toValue() {},
};
</code></pre>
<h2 id="原型链">原型链</h2>
<p>javaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p>
<h2 id="继承">继承</h2>
<p>关于这部分可以参考我的这篇文章<a href="https://www.huxinmin.com/home/5a0165b001a684264c42c594.html">Js实现继承的几种方式</a></p>
<h2 id="es6语法糖class的继承">ES6语法糖Class的继承</h2>
<p>Es6的class实现继承可以使用<code>extends</code></p>
<pre><code class="language-js">class ColorPoint extends Point {
  constructor() {
    super(); // 调用父类的constructor()
  }
}
</code></pre>
<p><code>super</code>关键字，它在这里表示父类的构造函数，用来新建父类的this对象。</p>
<p>子类必须在<code>constructor</code>方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p>
<h2 id="最简单明了的图">最简单明了的图</h2>
<p><img src='data:img/jpg;base64,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'/></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flex布局简介]]></title>
        <id>https://huxinmin.github.io/post/flex-bu-ju-jian-jie/</id>
        <link href="https://huxinmin.github.io/post/flex-bu-ju-jian-jie/">
        </link>
        <updated>2020-04-09T06:29:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。目标在于提供一个更有效地布局、对齐方式，并且能够使父元素在子元素的大小未知或动态变化情况下仍然能够分配好子元素之间的间隙。</p>
<p>Flex布局的主要思想是使父元素能够调节子元素的高度、宽度和排布的顺序，从而能够最好地适应可用布局空间（能够适应不同的设备和不同大小的屏幕）。设定为flex布局的元素能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。</p>
<p>最重要的是，与传统布局中块状元素按照垂直方向摆放，行内元素按照水平方向摆放相比，flex布局是无方向的。传统布局在应对大型复杂的布局时缺乏灵活性，特别是在改变方向、改变大小、伸展、收缩等等方面。</p>
<p>使用Flex布局很简单，只需要将父元素设置为：</p>
<pre><code class="language-css">.box{
  display: -webkit-flex; /* Safari */
  display: flex;  
  /* 行内元素设置为 display: inline-flex*/
}
</code></pre>
<h2 id="基本概念">基本概念</h2>
<ul>
<li>
<h4 id="容器container">容器(<code>container</code>)</h4>
</li>
</ul>
<p>也就是父元素，包含所有的需要进行布局的元素。</p>
<ul>
<li>
<h4 id="项目item">项目(<code>item</code>)</h4>
</li>
</ul>
<p>容器里面所有的子元素</p>
<ul>
<li>
<h4 id="主轴main-axis">主轴(<code>main axis</code>)</h4>
</li>
</ul>
<p>子元素布局的主要方向，默认是水平方向，可以通过<code>flex-direction</code>进行设置</p>
<ul>
<li>
<h4 id="交叉轴cross-axis">交叉轴(<code>cross axis</code>)</h4>
</li>
</ul>
<p>与主轴垂直的方向轴</p>
<ul>
<li>
<h4 id="主尺寸main-size">主尺寸(<code>main size</code>)</h4>
</li>
</ul>
<p>单个项目占据主轴的长度大小</p>
<ul>
<li>
<h4 id="交叉尺寸cross-size">交叉尺寸(<code>cross size</code>)</h4>
</li>
</ul>
<p>子元素在交叉轴方向上的大小</p>
<ul>
<li>
<h4 id="主轴开始结束main-startmain-end">主轴开始/结束(<code>main start/main end</code>)</h4>
</li>
</ul>
<p>分别表示主轴的开始和结束，子元素在父元素中会沿着主轴从<code>main-start</code>到<code>main-end</code>排布</p>
<ul>
<li>
<h4 id="交叉轴开始结束cross-startcross-end">交叉轴开始/结束(<code>cross start/cross end</code>)</h4>
</li>
</ul>
<p>分别表示交叉轴的开始和结束。子元素在交叉轴的排布从<code>cross-start</code>开始到<code>cross-end</code></p>
<p>这些概念可以很清晰地用下面的这张图进行表示：<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/1.png" alt="Flex 基本概念" /></p>
<h2 id="容器属性">容器属性</h2>
<ul>
<li>
<h4 id="flex-direction"><code>flex-direction</code></h4>
</li>
</ul>
<p>主轴的方向，有四个取值:<br>
- <code>row</code>（默认值）：主轴为水平方向，起点在左端。<br>
- <code>row-reverse</code>：主轴为水平方向，起点在右端。<br>
- <code>column</code>：主轴为垂直方向，起点在上沿。<br>
- <code>column-reverse</code>：主轴为垂直方向，起点在下沿。<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/2.png" alt="flex-direction" /></p>
<ul>
<li>
<h4 id="flex-wrap"><code>flex-wrap</code></h4>
</li>
</ul>
<p>规定如何换行，有三个取值：<br>
- <code>nowrap</code>（默认）：不换行<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/3.png" /><br>
- <code>wrap</code>：换行，第一行在上方<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/4.jpg" /><br>
- <code>wrap-reverse</code>：换行，第一行在下方<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/5.jpg" /></p>
<ul>
<li>
<h4 id="flex-flow"><code>flex-flow</code></h4>
</li>
</ul>
<p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p>
<ul>
<li>
<h4 id="justify-content"><code>justify-content</code></h4>
</li>
</ul>
<p><code>justify-content</code>属性定义了项目在主轴上的对齐方式，有5个取值：<br>
- <code>flex-start</code>（默认值）：左对齐<br>
- <code>flex-end</code>：右对齐<br>
- <code>center</code>： 居中<br>
- <code>space-between</code>：两端对齐，项目之间的间隔都相等<br>
- <code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/6.png" /></p>
<ul>
<li>
<h4 id="align-items"><code>align-items</code></h4>
</li>
</ul>
<p><code>align-items</code>属性定义项目在交叉轴上如何对齐，有五个取值：<br>
- <code>flex-start</code>：交叉轴的起点对齐。<br>
- <code>flex-end</code>：交叉轴的终点对齐。<br>
- <code>center</code>：交叉轴的中点对齐。<br>
- <code>baseline</code>: 项目的第一行文字的基线对齐。<br>
- <code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/7.png" /></p>
<ul>
<li>
<h4 id="align-content"><code>align-content</code></h4>
</li>
</ul>
<p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用，有6个取值：<br>
- <code>flex-start</code>：与交叉轴的起点对齐<br>
- <code>flex-end</code>：与交叉轴的终点对齐<br>
- <code>center</code>：与交叉轴的中点对齐<br>
- <code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布<br>
- <code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>
- <code>stretch</code>（默认值）：轴线占满整个交叉轴。<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/8.png" /></p>
<h2 id="项目属性">项目属性</h2>
<ul>
<li>
<h4 id="order"><code>order</code></h4>
</li>
</ul>
<p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/9.png" /></p>
<ul>
<li>
<h4 id="flex-grow"><code>flex-grow</code></h4>
</li>
</ul>
<p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/10.png" /><br>
如果所有的子元素的属性都设定为1，则父元素中的剩余空间会等分给所有子元素。如果其中某个子元素的flex-grow设定为2，则在分配剩余空间时该子元素将获得其他元素二倍的空间。</p>
<ul>
<li>
<h4 id="flex-shrink"><code>flex-shrink</code></h4>
</li>
</ul>
<p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/11.jpg" /><br>
如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<ul>
<li>
<h4 id="flex-basis"><code>flex-basis</code></h4>
</li>
</ul>
<p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小，它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间</p>
<ul>
<li>
<h4 id="flex"><code>flex</code></h4>
</li>
</ul>
<p>flex属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</p>
<ul>
<li>
<h4 id="align-self"><code>align-self</code></h4>
</li>
</ul>
<p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为auto，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>，该属性可能取6个值，除了auto，其他都与<code>align-items</code>属性完全一致<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Flex%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/12.png" /></p>
<h2 id="实例">实例</h2>
<ul>
<li>
<h4 id="水平垂直居中一">水平垂直居中一</h4>
</li>
</ul>
<pre><code class="language-css">.parent {
  background:green;
  display: flex;
  height: 100px; /* 随意设定大小 */
}
.child {
  width: 40px;  /* 随意设定大小，比父元素要小 */
  height: 40px; /* 同上 */
  margin: auto;  /* 见证奇迹的时刻 */
  background:red;
}
</code></pre>
<div style=" background:green;display: flex;height: 100px;">
    <div style="width: 40px;height: 40px;margin: auto;background:red;"></div>
</div>
- #### 水平垂直居中二
```css
.parent{
  background:green;
  display:flex;
  justify-content:center;
  align-items:center;
  height:100px;
}
.child{
  height:40px;
  width:40px;
  background:red;
}
```
<div style="background:green;display:flex;justify-content:center;align-items:center;height:100px;">
    <div style="height:40px;width:40px;background:red;"></div>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modernizr.js介绍与使用]]></title>
        <id>https://huxinmin.github.io/post/modernizrjs-jie-shao-yu-shi-yong/</id>
        <link href="https://huxinmin.github.io/post/modernizrjs-jie-shao-yu-shi-yong/">
        </link>
        <updated>2020-04-09T06:29:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>Modernizr 是一个用来检测浏览器功能支持情况的 JavaScript 库。 目前，通过检验浏览器对一系列测试的处理情况，Modernizr 可以检测CSS3 以及HTML5 的功能。 它比传统检测浏览器名称（浏览器嗅探）的方式更为可靠。 一整套测试的执行时间仅需几微秒。 此外，Modernizr 网站通过定制脚本只对你感兴趣的元素进行检测，从而实现效率优化。</p>
<p>总结来说，就是Modernizr.js既能给老版本浏览器打补丁，又能保证新浏览器渐进增强的用户体验。</p>
<h2 id="why-modernizr">Why Modernizr?</h2>
<p>尽管我们可以自己写代码来判断浏览器是否支持某些HTML5/CSS3特性，但是代码都不是很简单。例如：写代码判断浏览器是否支持canvans，我们的代码如下：</p>
<pre><code class="language-js">function canvasSupported() {
    var canvas = document.createElement('canvas');
    return (canvas.getContext &amp;&amp; canvas.getContext('2d'));
}
</code></pre>
<p>如果要判断是否支持本地存储（local storage），代码可能和下面的类似，但是很容易再Firefox下产生bug:</p>
<pre><code class="language-js">function localStorageSupported() {
    try {
         return ('localStorage' in window &amp;&amp; window['localStorage'] != null);
    }
    catch(e) {}
    return false;
}
</code></pre>
<p>前面2个例子都是分别检查一个特性，如果有很多HTML5/CSS3特性的话，我们不得不写多份代码来判断，不过还算幸运的是这些代码没有依赖顺序。Modernizr可以让你用很少的代码来实现上述复杂的功能。</p>
<h2 id="使用">使用</h2>
<p>Modernizr官方站点：<a href="http://modernizr.com" target="_blank" rel="nofollow">http://modernizr.com</a>，我们可以直接在官网上面进行下载，官网提供了2个类型的脚本（开发版和自定义的生产版本）。网站提供了一个自定义需求的工具来生成仅仅你需要的探测功能，而不是一个什么都可以探测的大而全的版本，就是说你可以让你的脚本最小化。<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Modernizr.js%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/modernizr.png" alt="自定义modernizr脚本"></p>
<p>下载完你自定义的脚本以后，你就可以像引用普通js文件一样引用它了，然后就可以用了。</p>
<pre><code class="language-js">&lt;script src=&quot;Scripts/Modernizr.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="html-与-classname">Html 与 className</h2>
<p>添加完Modernizr引用以后，它会在<code>&lt;html&gt;</code>元素上添加一批CSS的class名称，这些class名称标记当前浏览器支持哪些特性和不支持哪些特性，支持的特性就直接显示该天特性的名称作为一个class（例如:<code>canvas</code>,<code>websockets</code>），不支持的特性显示的class是“no-特性名称”（例如：<code>no-flexbox</code>）。下面这段代码是运行在Chrome下的效果：</p>
<pre><code class="language-html">&lt;html class=&quot; js flexbox canvas canvastext webgl no-touch geolocation postmessage 
              websqldatabase indexeddb hashchange history draganddrop websockets 
　　　　　　　　rgba hsla multiplebgs backgroundsize borderimage borderradius 
　　　　　　　　boxshadow textshadow opacity cssanimations csscolumns cssgradients
　　　　　　　　cssreflections csstransforms csstransforms3d csstransitions fontface 
　　　　　　　  generatedcontent video audio localstorage sessionstorage webworkers 
              applicationcache svg inlinesvg smil svgclippaths&quot;&gt;
</code></pre>
<p>下面这段代码是运行在IE9下的效果：</p>
<pre><code class="language-html">&lt;html class=&quot; js no-flexbox canvas canvastext no-webgl no-touch geolocation 
              postmessage no-websqldatabase no-indexeddb hashchange no-history 
　　　　　　　　draganddrop no-websockets rgba hsla multiplebgs backgroundsize 
　　　　　　　　no-borderimage borderradius boxshadow no-textshadow opacity 
　　　　　　　　no-cssanimations no-csscolumns no-cssgradients no-cssreflections
　　　　　　　　csstransforms no-csstransforms3d no-csstransitions fontface 
　　　　　　　　generatedcontent video audio localstorage sessionstorage 
　　　　　　　　no-webworkers no-applicationcache svg inlinesvg smil svgclippaths&quot;&gt;
</code></pre>
<p>使用Modernizr，有可能会出现下面代码的情况（添加no-js名称到class里）：</p>
<pre><code class="language-html">&lt;html class=&quot;no-js&quot;&gt;
</code></pre>
<p>添加no-js class到html元素下，是告诉浏览器是否支持JavaScript，如果不支持就显示<code>no-js</code>，如果支持就把<code>no-js</code>删掉。</p>
<h2 id="嗅探使用">嗅探使用</h2>
<ul>
<li>
<h4 id="直接使用在根html元素里生成的classname">直接使用在根<code>&lt;html&gt;</code>元素里生成的className</h4>
</li>
</ul>
<pre><code class="language-css">.boxshadow #MyContainer {
    border: none;
    -webkit-box-shadow: #666 1px 1px 1px;
    -moz-box-shadow: #666 1px 1px 1px;
}
.no-boxshadow #MyContainer {
    border: 2px solid black;
}
</code></pre>
<p>如果浏览器支持<code>box-shadows</code>的话，Modernizr就会将boxshadow class添加到<html>元素，然后你可以将它管理到一个相应的div的id上。如果不支持，Modernizr就会将<code>no-boxshadow</code> class添加到<code>&lt;html&gt;</code>元素，这样显示的就是一个标准的边框。这样我们就可以很方便地在支持CSS3特性的浏览器上使用CSS3新功能，不支持的浏览器上继续使用以前的方式。</p>
<ul>
<li>
<h4 id="使用全局的modernizr-javascript对象">使用全局的<code>Modernizr JavaScript</code>对象</h4>
</li>
</ul>
<p>该对象提供了不同的属性来表示某种新特性在当前浏览器下是否支持。例如，下面的代码可以用于判断浏览器是否支持canvas和local storag:</p>
<pre><code class="language-js">if (Modernizr.canvas) {
        //Add canvas code
}
if (Modernizr.localstorage) {
        //Add local storage code
 }
</code></pre>
<p>全局的Modernizr对象也可以用来探测是否支持CSS3特性，下面的代码用于测试是否支持<code>border-radius</code> 和CSS <code>transforms</code>:</p>
<pre><code class="language-js">if (Modernizr.borderradius) {
       //Add borderradiuscode
}
if (Modernizr.csstransforms) {
       //Add csstransformscode
}
</code></pre>
<h2 id="支持检测的特性">支持检测的特性</h2>
<p>在自定义下载页面，即可看到支持哪些特性以及使用方法，地址：<a href="https://modernizr.com/download?dontmin" target="_blank" rel="nofollow">https://modernizr.com/download?dontmin</a></p>
<h2 id="无法检测的特性">无法检测的特性</h2>
<p>在这个页面即可查看所有的不支持检测的特性：<a href="https://github.com/Modernizr/Modernizr/wiki/Undetectables" target="_blank" rel="nofollow">https://github.com/Modernizr/Modernizr/wiki/Undetectables</a></p>
<h2 id="加载script脚本">加载Script脚本</h2>
<p>在某些不支持新特性的浏览器上，Modernizr不仅仅提供了上述方式告诉你，也提供了load功能允许你加载一些<code>shim/polyfil</code>l脚本来达到支持的目的。Modernizr提供了一个脚本加载器来判断一个功能，如果不支持就加载相应的脚本。单独的脚本也可以在<a href="" target="_blank" rel="nofollow">http://yepnopejs.com</a>找到。</p>
<p>可以使用Modernizr的<code>load()</code>函数来动态加载脚本，该函数的test属性是表明要测试是否支持的新特性，如果测试成功支持的话，就加载yep属性设置的脚本，如果不支持就加载nope属性设置的脚本，不管是否支持，both属性里设置的脚本都会加载的。例子代码如下：</p>
<pre><code class="language-js">Modernizr.load({
    test: Modernizr.canvas,
    yep:  'html5CanvasAvailable.js’,
    nope: 'excanvas.js’, 
    both: 'myCustomScript.js' 
});
</code></pre>
<p>在该例子里，Modernizr会判断当前浏览器是否支持canvas特性，如果支持，那就会加载<code>html5CanvasAvailable.js</code>和<code>myCustomScript.js</code>这两个脚本，如果不支持，就会加载<code>excanvas.js</code>（用于IE9之前的版本）脚本文件以让该浏览器支持canvas功能，然后再加载<code>myCustomScript.js</code>脚本。</p>
<p>因为Modernizr可以加载脚本，所以你还可以用于其它的用途，比如，如果你引用的第三方脚本（例如提供CDN服务的Google和Microsoft提供jquery的托管）加载失败的情况下，可以加载备用的文件。下面的代码是Modernizr提供的一个加载jquery的示例：</p>
<pre><code class="language-js">Modernizr.load([
    {
        load: '//ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.js',
        complete: function () {
            if (!window.jQuery) {
                Modernizr.load('js/libs/jquery-1.6.4.min.js');
            }
        }
    },
    {
        // This will wait for the fallback to load and
        // execute if it needs to.
        load: 'needs-jQuery.js'
    }
]);
</code></pre>
<p>该代码会首先从Google CDN加载jQuery文件，如果下载或加载失败，complete函数就会执行，首先判断jQeury对象是否存在，如果不存在，Modernizr就会加载定义好的本机js文件，如果连 complete里的文件都加载不成功，就会加载<code>needs-jQuery.js</code>文件。</p>
<h2 id="html5跨浏览器垫片">HTML5跨浏览器垫片</h2>
<p>在这个页面可以找到官方收集的对于跨浏览器的各种垫片插件：<a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills" target="_blank" rel="nofollow">https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills</a></p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="nofollow">Modernizr Github地址</a></li>
<li><a href="https://modernizr.com/" target="_blank" rel="nofollow">Modernizr官网</a></li>
<li><a href="https://hacks.mozilla.org/2012/07/the-web-developer-toolbox-modernizr/" target="_blank" rel="nofollow">The Web Developer Toolbox: Modernizr</a></li>
<li><a href="http://yepnopejs.com/" target="_blank" rel="nofollow">YepNopeJS官网</a></li>
<li><a href="https://segmentfault.com/a/1190000003820989" target="_blank" rel="nofollow">JS进阶篇--前端的瑞士军刀Modernizr.js</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fetch使用方法以及与传统Ajax对比]]></title>
        <id>https://huxinmin.github.io/post/fetch-shi-yong-fang-fa-yi-ji-yu-chuan-tong-ajax-dui-bi/</id>
        <link href="https://huxinmin.github.io/post/fetch-shi-yong-fang-fa-yi-ji-yu-chuan-tong-ajax-dui-bi/">
        </link>
        <updated>2020-04-09T06:29:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="fetch简介">Fetch简介</h2>
<p>Fetch API  提供了一个 JavaScript接口，用于访问和操纵HTTP管道的部分，例如请求和响应。它还提供了一个全局 <code>fetch()</code>方法，该方法提供了一种简单，合乎逻辑的方式来跨网络异步获取资源。</p>
<p>这种功能以前是使用  XMLHttpRequest实现的。Fetch提供了一个更好的替代方法，可以很容易地被其他技术使用，例如 Service Workers。Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 CORS和HTTP的扩展。</p>
<h2 id="fetch与ajax区别">Fetch与Ajax区别</h2>
<ul>
<li>当接收到一个代表错误的 HTTP 状态码时，从 fetch()返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。</li>
<li>默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）.<br>
如果想要在同域中自动发送cookie,加上 credentials 的 same-origin 选项</li>
</ul>
<pre><code class="language-javascript">fetch(url, {
  credentials: ’same-origin'
})
</code></pre>
<p>same-origin值使得fetch处理Cookie与XMLHttpRequest类似。 否则，Cookie将不会被发送，导致这些请求不保留认证会话。<br>
对于CORS请求，使用include值允许将凭据发送到其他域：</p>
<pre><code class="language-javascript">fetch(url, {
  credentials: 'include'
})
</code></pre>
<h2 id="why-fetch">Why Fetch?</h2>
<ol>
<li>XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。</li>
<li>对于传统的XMLHttpRequest而言，你必须使用它的一个实例来执行请求和检索返回的响应。 但是通过Fetch API，我们还能够明确的配置请求对象。</li>
<li>同构方便，使用 <code>isomorphic-fetch</code><br>
<code>注：同构(isomorphic/universal)就是使前后端运行同一套代码的意思，后端一般是指 NodeJS 环境。</code></li>
</ol>
<h2 id="fetch的缺陷">Fetch的缺陷</h2>
<ol>
<li>Fetch的支持性不好,下图为Fetch在各大平台的支持情况。<br>
<img src="https://huxinmin.oss-cn-qingdao.aliyuncs.com/%E5%8D%9A%E5%AE%A2/Fetch%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/fetch.png"  alt="Fetch支持性情况"/></li>
<li>使用XMLHttpRequest你可以模拟进度（监听progress事件），Fetch无法做到</li>
<li>Fetch 和 Promise 一样，一旦发起，不能中断，也不会超时，只能等待被 resolve 或 reject。</li>
</ol>
<h2 id="语法说明">语法说明</h2>
<pre><code class="language-javascript">fetch(url, options).then(function(response) {
  // handle HTTP response
}, function(error) {
  // handle network error
})
</code></pre>
<ul>
<li>
<h4 id="url定义要获取的资源-这可能是">url:定义要获取的资源。这可能是：</h4>
<ul>
<li>一个 USVString 字符串，包含要获取资源的 URL。</li>
<li>一个 Request 对象。</li>
</ul>
</li>
<li>
<h4 id="options可选一个配置项对象包括所有对请求的设置-可选的参数有">options（可选）:一个配置项对象，包括所有对请求的设置。可选的参数有：</h4>
<ul>
<li>method: 请求使用的方法，如 GET、POST。</li>
<li>headers: 请求的头信息，形式为 Headers 对象或 ByteString。</li>
<li>body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li>
<li>mode: 请求的模式，如 cors、 no-cors 或者 same-origin。</li>
<li>credentials: 请求的 credentials，如 omit、same-origin 或者 include。</li>
<li>cache: 请求的 cache 模式: default, no-store, reload, no-cache, force-cache, 或者 only-if-cached。</li>
</ul>
</li>
<li>
<h4 id="response一个-promiseresolve-时回传-response-对象">response:一个 Promise，resolve 时回传 Response 对象：</h4>
<ul>
<li>
<p>属性：</p>
<ul>
<li>status (number) - HTTP请求结果参数，在100–599 范围</li>
<li>statusText (String) - 服务器返回的状态报告</li>
<li>ok (boolean) - 如果返回200表示请求成功则为true</li>
<li>headers (Headers) - 返回头部信息，下面详细介绍</li>
<li>url (String) - 请求的地址</li>
</ul>
</li>
<li>
<p>方法：</p>
<ul>
<li><code>text()</code> - 以string的形式生成请求text</li>
<li><code>json()</code> - 生成JSON.parse(responseText)的结果</li>
<li><code>blob()</code> - 生成一个Blob</li>
<li><code>arrayBuffer()</code> - 生成一个ArrayBuffer</li>
<li><code>formData()</code> - 生成格式化的数据，可用于其他的请求</li>
</ul>
</li>
<li>
<p>其他方法：</p>
<ul>
<li><code>clone()</code></li>
<li><code>Response.error()</code></li>
<li><code>Response.redirect()</code></li>
</ul>
</li>
</ul>
</li>
<li>
<h4 id="responseheaders">response.headers</h4>
<ul>
<li><code>has(name)</code> (boolean) - 判断是否存在该信息头</li>
<li><code>get(name)</code> (String) - 获取信息头的数据</li>
<li><code>getAll(name)</code> (Array) - 获取所有头部数据</li>
<li><code>set(name, value)</code> - 设置信息头的参数</li>
<li><code>append(name, value)</code> - 添加header的内容</li>
<li><code>delete(name)</code> - 删除header的信息</li>
<li><code>forEach(function(value, name){ ... }, [thisContext])</code> - 循环读取header的信息</li>
</ul>
</li>
</ul>
<h2 id="使用实例">使用实例</h2>
<pre><code class="language-javascript">var myHeaders = new Headers();
var myInit = { method: 'GET',
               headers: myHeaders,
               mode: 'cors',
               cache: 'default' };
fetch('flowers.jpg',myInit)
.then(function(response) {
  return response.blob();
})
.then(function(myBlob) {
  var objectURL = URL.createObjectURL(myBlob);
  myImage.src = objectURL;
});
</code></pre>
<p>也可以自定义请求对象：</p>
<pre><code class="language-javascript">var myHeaders = new Headers();
var myInit = { method: 'GET',
               headers: myHeaders,
               mode: 'cors',
               cache: 'default' };

var myRequest = new Request('flowers.jpg', myInit);
fetch(myRequest).then(function(response) {
  return response.blob();
}).then(function(myBlob) {
  var objectURL = URL.createObjectURL(myBlob);
  myImage.src = objectURL;
});
</code></pre>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="nofollow">MDN 使用 Fetch</a><br>
<a href="https://segmentfault.com/a/1190000007019545" target="_blank" rel="nofollow">SegmentFault Fetch用法说明</a><br>
<a href="https://github.com/github/fetch" target="_blank" rel="nofollow">Github Fetch</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React常见面试题分析]]></title>
        <id>https://huxinmin.github.io/post/react-chang-jian-mian-shi-ti-fen-xi/</id>
        <link href="https://huxinmin.github.io/post/react-chang-jian-mian-shi-ti-fen-xi/">
        </link>
        <updated>2020-04-09T06:28:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="react中state和props分别是什么">React中<code>state</code>和<code>props</code>分别是什么？</h2>
<p><code>props</code>是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的<code>props</code>来重新渲染子组件，否则子组件的<code>props</code>以及展现形式不会改变。<br>
<code>state</code>的主要作用是用于组件保存、控制以及修改自己的状态，它只能在<code>constructor</code>中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的<code>this.setState</code>来修改，修改<code>state</code>属性会导致组件的重新渲染。</p>
<h2 id="react的生命周期有哪些">React的生命周期有哪些？</h2>
<ul>
<li>组件的初始化阶段：
<ul>
<li><code>constructor()</code>: 用于绑定事件以及初始化<code>state</code>（可以通过&quot;fork&quot;<code>props</code>的方式给<code>state</code>赋值）</li>
<li><code>componentWillMount()</code>: 只会在服务端渲染时被调用，你可以在这里同步操作<code>state</code></li>
<li><code>render()</code>: 这个函数是用来渲染DOM没有错。但它只能用来渲染DOM，请保证它的纯粹性。如果有操作DOM或者和浏览器打交道的一系列操作，请在下一步骤<code>componentDidMount</code>中进行</li>
<li><code>componentDidMount()</code>: 如果你有第三方操作DOM的类库需要初始化（类似于<code>jQuery</code>，<code>Bootstrap</code>的一些组件）操作<code>DOM</code>、或者请求异步数据，都应该放在这个步骤中做</li>
</ul>
</li>
<li>组件更新阶段：
<ul>
<li><code>componentWillReceiveProps(nextProps)</code>: 在这里你可以拿到即将改变的状态，可以在这一步中通过<code>setState</code>方法设置<code>state</code></li>
<li><code>shouldComponentUpdate(nextProps, nextState)</code>: 这一步骤非常重要，它的返回值决定了接下来的生命周期函数是否会被调用，默认返回true，即都会被调用；你也可以重写这个函数使它返回false。</li>
<li><code>componentWillUpdate()</code>: 我也不知道这个声明周期函数的意义在哪里，在这个函数内你不能调用<code>setState</code>改变组件状态</li>
<li><code>render()</code></li>
<li><code>componentDidUpdate()</code>: 和<code>componentDidMount</code>类似，在这里执行DOM操作以及发起网络请求</li>
</ul>
</li>
<li>组件析构阶段：
<ul>
<li><code>componentWillUnmount()</code>: 主要用于执行一些清理工作，比如取消网络请求，清楚多余的DOM元素等</li>
</ul>
</li>
</ul>
<h2 id="组件的render函数在何时被调用">组件的Render函数在何时被调用</h2>
<p>如果单纯、侠义的回答这个问题，毫无疑问Render是在组件 <code>state</code> 发生改变时候被调用。无论是通过 <code>setState</code> 函数改变组件自身的<code>state</code>值，还是继承的 <code>props</code> 属性发生改变都会造成<code>render</code>函数被调用，即使改变的前后值都是一样的。</p>
<p>React组件中存在两类DOM，一类是众所周知的<code>Virtual DOM</code>，相信大家也耳熟能详了；另一类就是浏览器中的真实<code>DOM</code>（Real DOM/Native DOM）。React的<code>Render</code>函数被调用之后，React立即根据props或者state重新创建了一颗<code>Virtual DOM Tree</code>，虽然每一次调用时都重新创建，但因为在内存中创建DOM树其实是非常快且不影响性能的，所以这一步的开销并不大。而<code>Virtual DOM</code>的更新并不意味这<code>Real DOM</code>的更新，接下来的事情也是大家知道的，React采用算法将<code>Virtual DOM</code>和<code>Real DOM</code>进行对比，找出需要更新的最小步骤，此时<code>Real DOM</code>才可能发生修改。</p>
<p>每一次的<code>state</code>更改都会使得render函数被调用，但页面的DOM不一定会发生修改</p>
<h2 id="thispropschildren是什么"><code>this.props.children</code>是什么？</h2>
<p>它表示组件的所有子节点，值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code>;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code>。 React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code></p>
<h2 id="简单介绍下react的diff">简单介绍下react的diff</h2>
<p>传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。<br>
react的diff 策略：</p>
<ul>
<li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>
<li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>
<li>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li>
</ul>
<p>基于以上三个前提策略，React 分别对 <code>tree diff</code>、<code>component diff</code> 以及 <code>element diff</code> 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。</p>
<ul>
<li><code>tree diff</code><br>
基于策略一，React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。</li>
</ul>
<p>既然 DOM 节点跨层级的移动操作少到可以忽略不计，针对这一现象，React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。</p>
<ul>
<li><code>component diff</code>
<ul>
<li>如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。</li>
<li>如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。</li>
<li>对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。</li>
</ul>
</li>
<li><code>element diff</code><br>
允许开发者对同一层级的同组子节点，添加唯一 key 进行区分</li>
</ul>
<p>更多深入讲解可以参考这篇文章，讲的非常好<a href="https://zhuanlan.zhihu.com/purerender/20346379" target="_blank" rel="nofollow">React 源码剖析系列 － 不可思议的 react diff</a></p>
<h2 id="调用-setstate-之后发生了什么">调用 <code>setState</code> 之后发生了什么？</h2>
<p>在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p>
<h2 id="react-中-element-与-component-的区别是">React 中 Element 与 Component 的区别是？</h2>
<p>简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。</p>
<h2 id="在什么情况下你会优先选择使用-class-component-而不是-functional-component">在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？</h2>
<p>在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。</p>
<h2 id="react组件还有哪些具体的设计模式">React组件还有哪些具体的设计模式?</h2>
<ul>
<li><code>Higher-Order Components</code> (HOC高阶组件)<br>
通过函数向现有组件类添加逻辑，就是高阶组件。</li>
<li><code>Container Components</code><br>
我们把数据逻辑部分分离出来成为独立的组件，这类组件就是Container Components，而展现部分组件则是<code>Presentational Components</code>。</li>
<li><code>Stateless Components</code><br>
自己不维护状态而是依靠外部传入的状态</li>
</ul>
<h2 id="react-中-refs-的作用是什么">React 中 refs 的作用是什么？</h2>
<p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回</p>
<h2 id="controlled-component-与-uncontrolled-component-之间的区别是什么">Controlled Component 与 Uncontrolled Component 之间的区别是什么？</h2>
<p>React 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。<br>
而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素。</p>
<h2 id="在生命周期中的哪一步你应该发起-ajax-请求">在生命周期中的哪一步你应该发起 AJAX 请求？</h2>
<p>我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：</p>
<ul>
<li>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 <code>componentWillMount</code> 的触发次数。对于 <code>componentWillMount</code>这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 <code>componentWillMount</code>。如果我们将 AJAX 请求放到 <code>componentWillMount</code> 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。</li>
<li>如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了<code>setState</code>函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 <code>componentDidMount</code> 函数中进行 AJAX 请求则能有效避免这个问题。</li>
</ul>
<h2 id="概述下-react-中的事件处理逻辑">概述下 React 中的事件处理逻辑</h2>
<p>为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。</p>
<h2 id="传入-setstate-函数的第二个参数的作用是什么">传入 <code>setState</code> 函数的第二个参数的作用是什么？</h2>
<p>该函数会在<code>setState</code>函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS HEX十六进制与RGB颜色转换实现代码]]></title>
        <id>https://huxinmin.github.io/post/js-hex-shi-liu-jin-zhi-yu-rgb-yan-se-zhuan-huan-shi-xian-dai-ma/</id>
        <link href="https://huxinmin.github.io/post/js-hex-shi-liu-jin-zhi-yu-rgb-yan-se-zhuan-huan-shi-xian-dai-ma/">
        </link>
        <updated>2020-04-09T06:28:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="核心思路">核心思路</h2>
<p>JavaScript颜色转换的核心就是进制间的转换。RGB格式其实就是十进制表示法，所以，十六进制颜色与RGB颜色的转换就是十六进制与十进制之间的转换。</p>
<h3 id="数学计算方法">数学计算方法</h3>
<p>通常在数学上进行转换时，10进制转化为16进制时，只需要将的三原色数值除以16，第一位是商，第二位是余数。超过9的用字母表示，10对应A，11对应B，12对应C，13对应D，14对应E，15对应F。</p>
<p>例如：</p>
<pre><code class="language-js">RGB(169,245,8)R：169/16=10余9，而10对应A，即 A9G：245/16=15余5, 而15对应F，即 F5B：8/16=0余8，即08所以RGB(169,245,8)=#A9F508
</code></pre>
<p>16进制转10进制则做乘法，RGB的数值是16乘以HEX的第一位加上HEX的第二位，数字10以下的RGB和HEX都是相同的，但需要在前面补0成两位数，10对应A，11对应B，12对应C，13对应D，14对应E，15对应F。</p>
<p>例如：</p>
<pre><code class="language-js">#A9F508=RGB(16*10+9，16*15+5,16*0+8)=RGB(169,245,8)
</code></pre>
<h3 id="javascript自带转换方法">javascript自带转换方法</h3>
<p>十六进制转换为十进制相对容易些，核心代码如下示例：</p>
<pre><code class="language-javascript">parseInt(&quot;0xFF&quot;)
</code></pre>
<p>其结果就是255，”0x”就表明当前是16进制，由于<code>parseInt</code>后面无参数，默认就是转换为10进制了。</p>
<p>十进制转换为16进制，核心代码如下：</p>
<pre><code class="language-javascript">var num=255; num.toString(16);
</code></pre>
<p>其结果是<code>FF</code>。”16″表示数值转换为16进制字符串。</p>
<h2 id="rgb转换为hex实现代码">RGB转换为Hex实现代码</h2>
<pre><code class="language-javascript">String.prototype.RGB2Hex = function(){
    var _this = this;
    // 如果是rgb颜色表示
    if (/^(rgb|RGB)/.test(_this)) {
        var rgb = _this.split(',');
        var r = parseInt(rgb[0].split('(')[1]);
        var g = parseInt(rgb[1]);
        var b = parseInt(rgb[2].split(')')[0]);
        return &quot;#&quot; + r.toString(16) + g.toString(16) + b.toString(16);
    }else{
        throw  new Error(&quot;不是RGB颜色&quot;)
    }

}
</code></pre>
<h2 id="hex转换为rgb实现代码">Hex转换为RGB实现代码</h2>
<pre><code class="language-javascript">String.prototype.colorRgb = function(){
    var sColor = this.toLowerCase();
    //十六进制颜色值的正则表达式
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    // 如果是16进制颜色
    if (sColor &amp;&amp; reg.test(sColor)) {
        //如果为#333这样的形式
        if (sColor.length === 4) {
            var sColorNew = &quot;#&quot;;
            for (var i=1; i&lt;4; i+=1) {
                sColorNew += sColor.slice(i, i+1).concat(sColor.slice(i, i+1));    
            }
            sColor = sColorNew;
        }
        //处理六位的颜色值
        var sColorChange = [];
        for (var i=1; i&lt;7; i+=2) {
            sColorChange.push(parseInt(&quot;0x&quot;+sColor.slice(i, i+2)));    
        }
        return &quot;RGB(&quot; + sColorChange.join(&quot;,&quot;) + &quot;)&quot;;
    }
    return sColor;
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[kindle书籍免费下载方法]]></title>
        <id>https://huxinmin.github.io/post/kindle-shu-ji-mian-fei-xia-zai-fang-fa/</id>
        <link href="https://huxinmin.github.io/post/kindle-shu-ji-mian-fei-xia-zai-fang-fa/">
        </link>
        <updated>2020-04-09T06:28:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在2016年月份，我买了一个Kindle阅读器，但是亚马逊上面的电子书籍都是要钱的，身为一个中国免费党，所以我也一直致力与上网去找免费的电子书籍看，今天将这些时间的心得和体会写下来，希望能造福更多用户。</p>
<h2 id="网盘">网盘</h2>
<ol>
<li>
<h3 id="百度云盘搜索">百度云盘搜索</h3>
</li>
</ol>
<p>直接在百度搜索是无法搜索网盘里面的内容的，可以使用一些第三方制作的专门搜索网盘的网站，直接在百度搜索<code>百度云盘搜索</code>即可出现一大堆的网站，挑一个即可，然后直接在里面搜索你想要的书籍名字即可。<br>
2. ### 新浪微盘搜索<br>
<a href="http://vdisk.weibo.com/" target="_blank" rel="nofollow">新浪微盘</a><br>
里面有很多的资料包括电子书籍，只要在里面进行搜索即可。</p>
<h2 id="网站">网站</h2>
<ol>
<li><a href="https://www.amazon.cn/b?node=116175071" target="_blank" rel="nofollow">亚马逊官方免费书籍</a><br>
这是亚马逊官方免费书籍网站，还是有很多不错的书籍的。</li>
<li><a href="http://cn.epubee.com/books/" target="_blank" rel="nofollow">epuBee</a><br>
每天可以免费下载3本电子书（<code>经我测试，只要将你的cloud ID里面的书籍清空的话，可以无限制下载</code>），点击保存到<code>Cloud ID</code>，会出现成功，然后点击成功就进入到你的书籍列表，可以发送，下载，编辑。</li>
<li><a href="http://forfrigg.com/" target="_blank" rel="nofollow">forfrigg</a><br>
Kindle电子书免费下载搜索引擎，综合了各大网站的Kindle电子书下载资源，提供海量中英文电子书搜索服务。支持TXT,PDF,EPUB,MOBI,CHM等格式。(<code>需要翻墙才能使用</code>)</li>
<li><a href="https://kgbook.com/" target="_blank" rel="nofollow">苦瓜书盘</a><br>
不用注册，无限制下载</li>
<li><a href="http://mebook.cc/" target="_blank" rel="nofollow">我的小书屋</a><br>
不用注册，无限制下载，有两个域名，一个是<code>http://mebook.cc/</code>，另外一个是<code>http://www.shuwu.mobi/</code></li>
<li><a href="http://www.wode5.com/book/book1/book1-3/" target="_blank" rel="nofollow">我的书库</a><br>
需要注册登录才能下载，而且有的需要付费</li>
<li><a href="http://www.kindlepush.com/main" target="_blank" rel="nofollow">集思会</a><br>
需要注册登录才能下载，而且有的需要付费</li>
<li><a href="http://www.zoudupai.com/" target="_blank" rel="nofollow">走读派</a><br>
需要注册登录才能下载，不需要付费，界面类似于花瓣网的瀑布流。</li>
</ol>
<h2 id="qq群与微信公众号">QQ群与微信公众号</h2>
<p>直接在QQ群与公众号搜索界面搜索<code>kindle</code>等关键词，就会出现一大堆的结果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux定时任务Crontab命令详解]]></title>
        <id>https://huxinmin.github.io/post/linux-ding-shi-ren-wu-crontab-ming-ling-xiang-jie/</id>
        <link href="https://huxinmin.github.io/post/linux-ding-shi-ren-wu-crontab-ming-ling-xiang-jie/">
        </link>
        <updated>2020-04-09T06:27:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p><code>crond</code>是<code>linux</code>下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与<code>windows</code>下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动<code>crond</code>进程，<code>crond</code>进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。<code>cron</code>读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。<br>
<code>cron</code>的配置文件称为<code>crontab</code>，是<code>cron table</code>的简写。</p>
<h4 id="crontab支持两种状态"><code>crontab</code>支持两种状态：</h4>
<ul>
<li>直接编写计划任务，使用<code>crontab -e</code>来进行编写，用<code>crontab -l</code>查看是否编写成功</li>
<li>使用目录的方式，放在目录里面的都会定时执行，定时目录可在<code>/etc/crontab</code>中设定，<code>/etc/cron.d/</code> 这个目录用来存放任何要执行的<code>crontab</code>文件或脚本。</li>
</ul>
<h4 id="linux下的任务调度分为两类系统任务调度和用户任务调度">Linux下的任务调度分为两类，系统任务调度和用户任务调度：</h4>
<ul>
<li>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在<code>/etc</code>目录下有一个<code>crontab</code>文件，这个就是系统任务调度的配置文件。</li>
</ul>
<pre><code class="language-sh">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
# For details see man 4 crontabs
# Example of job definition:
# .---------------- minute (0 - 59)
# | .------------- hour (0 - 23)
# | | .---------- day of month (1 - 31)
# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...
# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# | | | | |
# * * * * * user-name command to be executed
</code></pre>
<p>前四行是用来配置<code>crond</code>任务运行的环境变量，第一行<code>SHELL</code>变量指定了系统要使用哪个<code>shell</code>，这里是<code>bash</code>，第二行<code>PATH</code>变量指定了系统执行命令的路径，第三行<code>MAILTO</code>变量指定了<code>crond</code>的任务执行信息将通过电子邮件发送给<code>root</code>用户，如果<code>MAILTO</code>变量的值为空，则表示不发送任务执行信息给用户，第四行的<code>HOME</code>变量指定了在执行命令或者脚本时使用的主目录</p>
<ul>
<li>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 <code>crontab</code> 工具来定制自己的计划任务。所有用户定义的<code>crontab</code>文件都被保存在 <code>/var/spool/cron</code>目录中。其文件名与用户名一致。<br>
使用者权限文件如下：
<ul>
<li><code>/etc/cron.deny</code>     该文件中所列用户不允许使用crontab命令</li>
<li><code>/etc/cron.allow</code>    该文件中所列用户允许使用crontab命令</li>
<li><code>/var/spool/cron/</code>   所有用户crontab文件存放的目录,以用户名命名</li>
</ul>
</li>
</ul>
<h2 id="语法">语法</h2>
<p><code>crontab</code>的使用方法为：</p>
<pre><code class="language-sh">crontab(选项)(参数)
</code></pre>
<p>选项的值可以有：</p>
<ul>
<li><code>-e</code>：编辑该用户的计时器设置；</li>
<li><code>-l</code>：列出该用户的计时器设置；</li>
<li><code>-r</code>：删除该用户的计时器设置；</li>
<li><code>-u</code>&lt;用户名称&gt;：指定要设定计时器的用户名称。</li>
</ul>
<p>参数为<code>crontab</code>文件：指定包含待执行任务的<code>crontab</code>文件。</p>
<h4 id="crontab文件的含义"><code>crontab</code>文件的含义：</h4>
<p>用户所建立的<code>crontab</code>文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p>
<pre><code class="language-sh">minute   hour   day   month   week   command     顺序：分 时 日 月 周
</code></pre>
<p>其中：</p>
<ul>
<li><code>minute</code>： 表示分钟，可以是从0到59之间的任何整数。</li>
<li><code>hour</code>：表示小时，可以是从0到23之间的任何整数。</li>
<li><code>day</code>：表示日期，可以是从1到31之间的任何整数。</li>
<li><code>month</code>：表示月份，可以是从1到12之间的任何整数。</li>
<li><code>week</code>：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</li>
<li><code>command</code>：要执行的命令(可以指定需要执行命令的程序路径和输出的路径)，可以是系统命令，也可以是自己编写的脚本文件。</li>
</ul>
<p>在以上各个字段中，还可以使用以下特殊字符：</p>
<ul>
<li>星号（<code>*</code>）：代表所有可能的值，例如<code>month</code>字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>
<li>逗号（<code>,</code>）：可以用逗号隔开的值指定一个列表范围，例如，<code>1,2,5,7,8,9</code></li>
<li>中杠（<code>-</code>）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示<code>2,3,4,5,6</code></li>
<li>正斜线（<code>/</code>）：可以用正斜线指定时间的间隔频率，例如<code>0-23/2</code>表示每两小时执行一次。同时正斜线可以和星号一起使用，例如<code>*/10</code>如果用在<code>minute</code>字段，表示每十分钟执行一次。</li>
</ul>
<h2 id="服务与配置">服务与配置</h2>
<p>安装crontab：</p>
<pre><code class="language-sh">yum install crontabs
</code></pre>
<p>服务操作说明：</p>
<pre><code class="language-sh">/sbin/service crond start    //启动服务
/sbin/service crond stop     //关闭服务
/sbin/service crond restart  //重启服务
/sbin/service crond reload   //重新载入配置
</code></pre>
<p>查看crontab服务状态：</p>
<pre><code class="language-sh">service crond status
</code></pre>
<p>手动启动crontab服务：</p>
<pre><code class="language-sh">service crond start
</code></pre>
<p>查看crontab服务是否已设置为开机启动，执行命令：</p>
<pre><code class="language-sh">ntsysv
</code></pre>
<p>加入开机自动启动：</p>
<pre><code class="language-sh">chkconfig –level 35 crond on
</code></pre>
<p>查看cron运行日志：</p>
<pre><code class="language-sh">tail -f /var/log/cron.log
</code></pre>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>脚本中涉及文件路径时写全局路径；</li>
<li>脚本执行要用到java或其他环境变量时，通过<code>source</code>命令引入环境变量，如：</li>
</ul>
<pre><code class="language-sh">#!/bin/sh
source /etc/profile
</code></pre>
<ul>
<li>新创建的定时任务，不会马上执行，至少要过2分钟才执行。如果重启<code>cron</code>则马上执行。</li>
<li>当<code>crontab</code>突然失效时，可以尝试<code>/etc/init.d/crond restart</code>解决问题。或者查看日志看某个任务有没有执行报错<code>tail -f /var/log/cron</code>。</li>
<li>谨慎运行<code>crontab -r</code>。它从<code>Crontab</code>目录（<code>/var/spool/cron</code>）中删除用户的Crontab文件。删除了该用户的所有<code>crontab</code>都没了。</li>
<li>在<code>crontab</code>中<code>%</code>是有特殊含义的，表示换行的意思。如果要用的话必须进行转义<code>\%</code>，如经常用的<code>date ‘+%Y%m%d’</code>在<code>crontab</code>里是不会执行的，应该换成<code>date ‘+\%Y\%m\%d’</code>。</li>
</ul>
<h2 id="实例">实例</h2>
<pre><code class="language-sh">* * * * * command  #每1分钟执行一次command
3,15 * * * * command #每小时的第3和第15分钟执行
3,15 8-11 * * * command # 在上午8点到11点的第3和第15分钟执行
0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt #每天早上6点，注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。
0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt  #每两个小时 
30 2 * * 1 /usr/bin/certbot renew  &gt;&gt; /var/log/le-renew.log  #每周一半夜2点30分执行/usr/bin/certbot路径下的renew任务，并向le-renew.log中追加输出结果
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Less中解决CSS3的calc编译出错问题]]></title>
        <id>https://huxinmin.github.io/post/less-zhong-jie-jue-css3-de-calc-bian-yi-chu-cuo-wen-ti/</id>
        <link href="https://huxinmin.github.io/post/less-zhong-jie-jue-css3-de-calc-bian-yi-chu-cuo-wen-ti/">
        </link>
        <updated>2020-04-09T06:27:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="less简介">Less简介</h2>
<p><code>Less</code>是一门 <code>CSS</code> 预处理语言，它扩展了<code>CSS</code> 语言，增加了变量、<code>Mixin</code>、函数等特性，使 <code>CSS</code> 更易维护和扩展。<br>
<code>LESS</code> 将 <code>CSS</code> 赋予了动态语言的特性，如 变量， 继承， 运算， 函数. <code>LESS</code> 既可以在 客户端 上运行 (支持<code>IE 6+, Webkit, Firefox</code>)，也可以借助<code>Node.js</code>或者<code>Rhino</code>在服务端运行。<br>
例子：</p>
<pre><code class="language-css">@base: #f938ab;

.box-shadow(@style, @c) when (iscolor(@c)) {
  -webkit-box-shadow: @style @c;
  box-shadow:         @style @c;
}
.box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)) {
  .box-shadow(@style, rgba(0, 0, 0, @alpha));
}
.box {
  color: saturate(@base, 5%);
  border-color: lighten(@base, 30%);
  div { .box-shadow(0 0 5px, 30%) }
}
</code></pre>
<p>输出：</p>
<pre><code class="language-css">.box {
  color: #fe33ac;
  border-color: #fdcdea;
}
.box div {
  -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
}
</code></pre>
<h2 id="calc简介">Calc简介</h2>
<p><code>calc()</code>从字面我们可以把他理解为一个函数<code>function</code>，它是英文单词<code>calculate</code>(计算)的缩写，是<code>css3</code>的一个新增的功能，用来指定元素的长度。你可以使用calc()给元素的<code>border、margin、pading、font-size</code>和<code>width</code>等属性设置动态值。为何说是动态值呢?因为我们使用的表达式来得到的值。不过<code>calc()</code>最大的好处就是用在流体布局上，可以通过<code>calc()</code>计算得到元素的宽度。<br>
不过使用的时候要注意以下几点：</p>
<ul>
<li>使用<code>+ - *</code> 和 <code>/</code>四则运算；</li>
<li>可以使用百分比、<code>px em rem</code>等单位；</li>
<li>可以混合使用各种单位进行计算；</li>
<li>表达式中有<code>+ -</code>时，其前后必须要有空格，如<code>widht: calc(10%+5px)</code>这种没有空格的写法是错误的；</li>
<li>表达式中有<code>* /</code>时，其前后可以没有空格，但建议留有空格。</li>
</ul>
<h2 id="问题描述">问题描述</h2>
<p>当在<code>Less</code>中使用<code>CSS3</code>的<code>calc</code>计算功能时候，这时候却发生错误了，<code>Less</code>会直接把它当作一个表示式进行编译运算，而不是就是一个直接的<code>calc</code>表达式交给浏览器去计算。<br>
如下：</p>
<pre><code class="language-css">width: calc(100% - 120px);
</code></pre>
<p>会变成</p>
<pre><code class="language-css">width: calc(-20%);
</code></pre>
<h2 id="解决办法">解决办法</h2>
<p>在网上查找了许久，终于找到了解决办法，那就是使用<code>~ &quot;&quot;</code>即可。<br>
如下：</p>
<pre><code class="language-css">width: calc(~&quot;100% - 120px&quot;);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx调试以及输出模块配置]]></title>
        <id>https://huxinmin.github.io/post/nginx-diao-shi-yi-ji-shu-chu-mo-kuai-pei-zhi/</id>
        <link href="https://huxinmin.github.io/post/nginx-diao-shi-yi-ji-shu-chu-mo-kuai-pei-zhi/">
        </link>
        <updated>2020-04-09T06:27:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>Nginx是一个优秀的服务器框架，但是有时候在我们进行配置的时候，写了很多的规则，这时候我们也不清楚这些规则写对了没有，Nginx按照怎样的流程进行执行的，这时候我们就需要对Nginx进行调试和输出，来看Nginx是否按照预期的流程进行执行。</p>
<h2 id="nginx-debug">Nginx-debug</h2>
<p>Nginx自带了debug模式，不过需要在安装配置的时候加上</p>
<pre><code class="language-sh">--with-debug
</code></pre>
<p>好多用户可能初次安装nginx的时候，没有加<code>--with-debug</code>参数，这时候，很多用户就会顾虑：如果我重新./configure编译，那我之前安装的nginx的配置文件等等是不是就没了。答案是：不会的，nginx只会进行增量编译。</p>
<pre><code class="language-sh">./configure --prefix=/usr/local/nginx --with-debug
</code></pre>
<p>然后在你的配置里这样写：</p>
<pre><code class="language-sh">server{   
    server_name http://example.com;   
    error_log /path/to/errorlog/error.log debug;
    error_log /path/to/errorlog/error.log debug_http;
}
</code></pre>
<p>总得来说，nginx记录日志信息分两个级别，第一个级别的取值为如下之一：</p>
<ul>
<li><code>stderr</code></li>
<li><code>emerg</code></li>
<li><code>alert</code></li>
<li><code>crit</code></li>
<li><code>error</code></li>
<li><code>warn</code></li>
<li><code>notice</code></li>
<li><code>info</code></li>
<li><code>debug</code></li>
</ul>
<p>这些值是互斥的，也就是说只能取其中之一。<br>
如果我们指定第一个级别为<code>debug</code>，那么nginx还允许我们指定第二级别：</p>
<ul>
<li><code>debug_core</code></li>
<li><code>debug_alloc</code></li>
<li><code>debug_mutex</code></li>
<li><code>debug_event</code></li>
<li><code>debug_http</code></li>
<li><code>debug_mail</code></li>
<li><code>debug_mysql</code></li>
</ul>
<p>第二级别的指定是多选的，因此可以有多条关于第二级别的配置项目：</p>
<pre><code class="language-sh">error_log  logs/error.log debug_http;
error_log  logs/error.log debug_core;
</code></pre>
<p><code>注意：在且仅在第一个级别为”debug”时才可以有第二级别的配置，其它第一级别情况下指定第二级别将无法启动nginx</code></p>
<h2 id="echo-nginx-module">echo-nginx-module</h2>
<ul>
<li>
<h3 id="模块简介">模块简介</h3>
</li>
</ul>
<p>echo模块式国人编写的nginx的第三方模块，下载官方nginx后需要再下载echo模块，并且配合nginx编译安装，安装此模块后可以在nginx的url访问中可以通过echo命令输出字符到用户的浏览器中，可用于检测nginx的可访问性，检测nginx的配置的正确性（这是当前我需要用的nginx的主要功能），可用于打印你希望了解的http代理相关http参数，总之在调试配置nginx环节，echo命令非常有用。</p>
<ul>
<li>
<h3 id="安装方法">安装方法</h3>
</li>
</ul>
<p>先去下载Nginx和echo-nginx-module的源码包，然后进行解压，编译。<br>
下载地址分别为</p>
<pre><code class="language-sh">http://nginx.org/download/
https://github.com/openresty/echo-nginx-module/tags
配置的时候使用`add-module`指向`echo-nginx-module`的解压路径目录即可。
</code></pre>
<pre><code class="language-sh">./configure --prefix=/usr/local/nginx --add-module=/usr/local/echo-nginx-module
make &amp;&amp; make install
</code></pre>
<ul>
<li>
<h3 id="使用方法">使用方法</h3>
</li>
</ul>
<pre><code class="language-sh">location / {
    echo &quot;hello world!&quot;
}
</code></pre>
<p>注意点:</p>
<pre><code>1. echo命令只能放在url请求中，如果放在url请求外，会报错
2. 一次url请求，echo 只能打印一行
3. 如果echo后边有配置`return `或者配置 `proxy_pass`或者`rewrite`，则echo的输出会
   被覆盖，即浏览器无法看到echo的内容
4. echo的内容不是写在nginx的配置文件中，而是输出到浏览器中，所以echo的打印字符的查看
   请在浏览器中查看，或者使用curl查看
</code></pre>
<p>更多资料请参考 <a href="https://github.com/openresty/echo-nginx-module" rel="nofollow" target="_blank">https://github.com/openresty/echo-nginx-module</a></p>
]]></content>
    </entry>
</feed>